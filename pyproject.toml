[project]
name = "mobgap"
version = "0.11.0"
description = "A Python implementation of the Mobilise-D algorithm pipeline for gait analysis using IMU worn at the lower back."
authors = [
    { name = "Arne Küderle", email = "arne.kuederle@fau.de" },
    { name = "Felix Kluge", email = "felix.kluge@novartis.com" },
    { name = "Paolo Tasca", email = "paolo.tasca@polito.it" },
    { name = "Metin Bicer", email = "metin.bicer@newcastle.ac.uk" },
    { name = "Annika Mücke", email = "annika-muecke@outlook.de" },
    { name = "Dimitrios Megaritis", email = "Dimitris.Megaritis@newcastle.ac.uk" },
    { name = "Zamal Babar", email = "zamalali9866@gmail.com" },
    { name = "Alexandru Stihi", email = "astihi1@sheffield.ac.uk" },
    { name = "Chloe Hinchliffe", email = "Chloe.Hinchliffe@newcastle.ac.uk" },
    { name = "Cameron Kirk", email = "Cameron.Kirk@newcastle.ac.uk" },
    { name = "Björn Eskofier", email = "bjoern.eskofier@fau.de" },
]
requires-python = ">=3.9,<3.14"
readme = "README.md"
license = "Apache-2.0"
dependencies = [
    "tpcp>=2.0.0",
    "pandas>=2.2.0",
    "scipy>=1.11.2",
    "numpy>=1.25.2",
    "scikit-learn>=1.3.0",
    "joblib>=1.3.2",
    "openpyxl>=3.1.2",
    "intervaltree>=3.1.0",
    "pywavelets>=1.5.0",
    "pooch>=1.8.1",
    "pingouin>=0.5.4",
    "numba>=0.60.0",
    "python-dotenv>=1.0.1",
    "seaborn>=0.12.0",
]

[dependency-groups]
dev = [
    "poethepoet>=0.22.0,<0.23",
    "pytest>=7.4.0,<8",
    "pytest-cov>=4.1.0,<5",
    "ruff>=0.5.0",
    "sphinx>=7.2.6,<8",
    "sphinx-gallery>=0.18.0,<0.19",
    "memory-profiler>=0.61.0,<0.62",
    "matplotlib>=3.7.2,<4",
    "toml>=0.10.2,<0.11",
    "pydata-sphinx-theme>=0.16.0,<0.17",
    "myst-parser>=2.0.0,<3",
    "ipykernel>=6.25.1,<7",
    "numpydoc>=1.6.0,<2",
    "ipympl>=0.9.4,<0.10",
    "pathspec>=0.12.1,<0.13",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
_format = "ruff format ."
_rst_heading_fix = { cmd = "python ./fix_rst_headings.py ./revalidation ./examples ./docs/guides ./docs/modules", help = "Fix the headlines in the rst files." }
_auto_fix = "ruff check . --fix-only --show-fixes --exit-zero"
_auto_fix_unsafe = "ruff check . --fix-only --show-fixes --exit-zero --unsafe-fixes"
format = ["_rst_heading_fix", "_auto_fix", "_format"]
format_unsafe = ["_auto_fix_unsafe", "_format"]
lint = { cmd = "ruff check src --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff check src --output-format=github"
_check_format = "ruff format . --check"
_file_length = { "script" = "_tasks:task_no_long_file_names()", help = "Check the length of all files." }
ci_check = { sequence = ["_check_format", "_lint_ci", "_check_update_example_data", "_file_length"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest tests --cov=src/mobgap --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
test_ci = { cmd = "pytest tests --cov=src/mobgap --cov-report=term-missing --cov-report=xml --snapshot-only-check", help = "Run Pytest with coverage and fail on missing snapshots." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
docs_clean = { "script" = "_tasks:task_docs(clean=True)",  help = "Remove all old build files and build a clean version of the docs." }
docs_linkcheck = { "script" = "_tasks:task_docs(builder='linkcheck')", help = "Check all links in the built html docs." }
docs_preview = { cmd = "python -m http.server --directory docs/_build/html", help = "Preview the built html docs." }
version = { script = "_tasks:task_update_version", help="Bump the version number in all relevant files."}
conf_jupyter = { cmd = "python -m ipykernel install --user --name mobgap", help = "Add a new jupyter kernel for the project." }
remove_jupyter = { cmd = "jupyter kernelspec uninstall mobgap", help = "Remove the project specific jupyter kernel."}
update_example_data = { script="_tasks:task_update_example_data", help = "Update the example data registry."}
_check_update_example_data = { script="_tasks:task_update_example_data(raise_if_changes=True)", help = "Update the example data registry."}
update_validation_results = {script = "_tasks:task_update_validation_results()", help = "Update the validation results."}
freeze_validation_results_version = { script = "_tasks:task_freeze_validation_result_version()", help = "Freeze the validation results version."}
unfreeze_validation_results_version = { script = "_tasks:task_unfreeze_validation_result_version()", help = "Unfreeze the validation results version."}


