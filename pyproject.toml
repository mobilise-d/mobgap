[tool.poetry]
name = "mobgap"
version = "0.2.0"
description = "A Python implementation of the Mobilise-D algorithm pipeline for gait analysis using IMU worn at the lower back."
authors = [
    "Arne Küderle <arne.kuederle@fau.de>",
    "Felix Kluge <felix.kluge@novartis.com>",
    "Paolo Tasca <paolo.tasca@polito.it>",
    "Annika Mücke <annika-muecke@outlook.de>",
    "dmegaritis <dmgrei3@gmail.com>",
    "Zamal Ali <zamalali9866@gmail.com>",
    "Björn Eskofier <bjoern.eskofier@fau.de>"
]
license = "Apache-2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
tpcp = ">=0.31.2"
pandas = ">=2.1.0"
scipy = ">=1.11.2"
numpy = ">=1.25.2"
scikit-learn = ">=1.3.0"
# TODO: Remove this dependency at some point
gaitmap = "^2.3.0"
joblib = ">=1.3.2"
openpyxl = "^3.1.2"
intervaltree = "^3.1.0"
pywavelets = "^1.5.0"
pooch = "^1.8.1"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.22.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
ruff = "^0.3.0"
sphinx = "^7.2.6"
sphinx-gallery = "^0.14.0"
memory-profiler = "^0.61.0"
matplotlib = "^3.7.2"
toml = "^0.10.2"
pydata-sphinx-theme = "^0.14.1"
myst-parser = "^2.0.0"
ipykernel = "^6.25.1"
numpydoc = "^1.6.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
_format = "ruff format ."
_auto_fix = "ruff check . --fix-only --show-fixes --exit-zero"
_auto_fix_unsafe = "ruff check . --fix-only --show-fixes --exit-zero --unsafe-fixes"
format = ["_auto_fix", "_format"]
format_unsafe = ["_auto_fix_unsafe", "_format"]
lint = { cmd = "ruff check mobgap --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff check mobgap --output-format=github"
_check_format = "ruff format . --check"
ci_check = { sequence = ["_check_format", "_lint_ci", "_check_update_example_data"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=mobgap --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
docs_clean = { "script" = "_tasks:task_docs(clean=True)",  help = "Remove all old build files and build a clean version of the docs." }
docs_linkcheck = { "script" = "_tasks:task_docs(builder='linkcheck')", help = "Check all links in the built html docs." }
docs_preview = { cmd = "python -m http.server --directory docs/_build/html", help = "Preview the built html docs." }
version = { script = "_tasks:task_update_version()", help="Bump the version number in all relevant files."}
conf_jupyter = { cmd = "python -m ipykernel install --user --name mobgap", help = "Add a new jupyter kernel for the project." }
remove_jupyter = { cmd = "jupyter kernelspec uninstall mobgap", help = "Remove the project specific jupyter kernel."}
update_example_data = { script="_tasks:task_update_example_data", help = "Update the example data registry."}
_check_update_example_data = { script="_tasks:task_update_example_data(raise_if_changes=True)", help = "Update the example data registry."}


